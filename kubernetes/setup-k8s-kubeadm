
#1# Update the package index
sudo apt-get update
# Update packages required for HTTPS package repository access
sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common gnupg lsb-release

#2# Allow forwarding IPv4 by loading the br_netfilter module with the follow commands:
# Load br_netfilter module
sudo modprobe overlay
sudo modprobe br_netfilter
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF


#3# Allow the Linux node's iptables to correctly view bridged traffic with the following commands:
# sysctl params required by setup, params persist across reboots
cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF
# Apply sysctl params without reboot
sudo sysctl --system

## 4 Install containerd using the DEB package distributed by Docker with the following commands:
# Add Dockerâ€™s official GPG key
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
# Set up the repository
echo \
  "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
# Install containerd
sudo apt-get update
sudo apt-get install -y containerd.io=1.7.19-1

## 5. Configure the systemd cgroup driver with the following commands:
# Configure the systemd cgroup driver
sudo mkdir -p /etc/containerd
containerd config default | sudo tee /etc/containerd/config.toml
sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
sudo systemctl restart containerd
# This is required to mitigate the instability of having two cgroup managers. 

6. Install kubeadm, kubectl, and kubelet from the official Kubernetes package repository:
# Add the public signing key for the Kubernetes package repositories
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
# Add the Kubernetes release repository
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
# Update the package index to include the Kubernetes repository
sudo apt-get update
# Install the packages
sudo apt-get install -y kubelet kubeadm kubectl

7.  Prevent automatic updates to the installed packages with the following command:
sudo apt-mark hold kubelet kubeadm kubectl

8. Display the help page for kubeadm:
kubeadm

### Initializing the Kubernetes Master Node  #####
1. Initialize the control-plane node using the init command:
sudo kubeadm init --pod-network-cidr=192.168.0.0/16 --kubernetes-version=stable-1.30

2. Copy the kubeadm join command at the end of the output and store it somewhere you can access later.

It is simply convenient to reuse the given command, although you can regenerate it and create new tokens using the kubeadm token command. The join tokens expire after 24 hours by default.

3. Initialize your user's default kubectl configuration using the admin kubeconfig file generated by kubeadm:
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

4. Confirm you can use kubectl to get the cluster component statuses:
kubectl get componentstatuses
5. Get the nodes in the cluster:
kubectl get nodes

6. Describe the node to probe deeper into its NotReady status:
kubectl describe nodes

7. Enter the following commands to create the Calico network plugin for pod networking:
kubectl apply -f https://clouda-labs-assets.s3.us-west-2.amazonaws.com/k8s-common/1.30/scripts/calico.yaml
8. Watch the status of the nodes in the cluster:
watch kubectl get nodes

#### Join worker node to master
use the command noted in in step 2 earlier

then go to master node and run kubectl get node command to validate thhat worker node joined master
also run below comand to see all running pods 
kubectl get pods --all-namespaces




